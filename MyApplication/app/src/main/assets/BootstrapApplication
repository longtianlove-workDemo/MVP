package com.android.tools.fd.runtime;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.Application;
import android.app.Application.ActivityLifecycleCallbacks;
import android.app.Application.OnProvideAssistDataListener;
import android.content.ComponentCallbacks;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.os.Process;
import android.util.Log;
import com.android.tools.fd.common.Log.Logging;
import java.io.File;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.util.List;
import java.util.logging.Level;

public class BootstrapApplication extends Application
{
  public static final String LOG_TAG = "InstantRun";
  private String externalResourcePath;
  private Application realApplication;

  public BootstrapApplication()
  {
    if (Log.isLoggable("InstantRun", 2))
      Log.v("InstantRun", String.format("BootstrapApplication created. Android package is %s, real application class is %s.", new Object[] { AppInfo.applicationId, AppInfo.applicationClass }));
  }

  private void createResources(long apkModified)
  {
    FileManager.checkInbox();

    File file = FileManager.getExternalResourceFile();
    this.externalResourcePath = (file != null ? file.getPath() : null);

    if (Log.isLoggable("InstantRun", 2)) {
      Log.v("InstantRun", new StringBuilder().append("Resource override is ").append(this.externalResourcePath).toString());
    }

    if (file != null)
      try {
        long resourceModified = file.lastModified();
        if (Log.isLoggable("InstantRun", 2)) {
          Log.v("InstantRun", new StringBuilder().append("Resource patch last modified: ").append(resourceModified).toString());
          Log.v("InstantRun", new StringBuilder().append("APK last modified: ").append(apkModified).append(" ").append(apkModified > resourceModified ? ">" : "<").append(" resource patch").toString());
        }

        if ((apkModified == 0L) || (resourceModified <= apkModified)) {
          if (Log.isLoggable("InstantRun", 2)) {
            Log.v("InstantRun", "Ignoring resource file, older than APK");
          }
          this.externalResourcePath = null;
        }
      } catch (Throwable t) {
        Log.e("InstantRun", "Failed to check patch timestamps", t);
      }
  }

  private static void setupClassLoaders(Context context, String codeCacheDir, long apkModified)
  {
  ************************/data/data/package_name/files/instant-run/dex/目录下的dex列表*********
    List dexList = FileManager.getDexList(context, apkModified);

    Class server = Server.class;
    Class patcher = MonkeyPatcher.class;

    if (!dexList.isEmpty()) {
      if (Log.isLoggable("InstantRun", 2)) {
        Log.v("InstantRun", new StringBuilder().append("Bootstrapping class loader with dex list ").append(join('\n', dexList)).toString());
      }
ClassLoader classLoader = BootstrapApplication.class.getClassLoader();
      String nativeLibraryPath;
      try {
        nativeLibraryPath = (String)classLoader.getClass().getMethod("getLdLibraryPath", new Class[0]).invoke(classLoader, new Object[0]);

        if (Log.isLoggable("InstantRun", 2))
          Log.v("InstantRun", new StringBuilder().append("Native library path: ").append(nativeLibraryPath).toString());
      }
      catch (Throwable t) {
        Log.e("InstantRun", new StringBuilder().append("Failed to determine native library path ").append(t.getMessage()).toString());
        nativeLibraryPath = FileManager.getNativeLibraryFolder().getPath();
      }
      IncrementalClassLoader.inject(classLoader, nativeLibraryPath, codeCacheDir, dexList);
    }
  }

  public static String join(char on, List<String> list)
  {
    StringBuilder stringBuilder = new StringBuilder();
    for (String item : list) {
      stringBuilder.append(item).append(on);
    }
    stringBuilder.deleteCharAt(stringBuilder.length() - 1);
    return stringBuilder.toString();
  }

  private void createRealApplication() {
    if (AppInfo.applicationClass != null) {
      if (Log.isLoggable("InstantRun", 2)) {
        Log.v("InstantRun", new StringBuilder().append("About to create real application of class name = ").append(AppInfo.applicationClass).toString());
      }

      try
      {
        Class realClass = Class.forName(AppInfo.applicationClass);

        if (Log.isLoggable("InstantRun", 2)) {
          Log.v("InstantRun", new StringBuilder().append("Created delegate app class successfully : ").append(realClass).append(" with class loader ").append(realClass.getClassLoader()).toString());
        }

        Constructor constructor = realClass.getConstructor(new Class[0]);
        this.realApplication = ((Application)constructor.newInstance(new Object[0]));
        if (Log.isLoggable("InstantRun", 2))
          Log.v("InstantRun", new StringBuilder().append("Created real app instance successfully :").append(this.realApplication).toString());
      }
      catch (Exception e) {
        throw new IllegalStateException(e);
      }
    } else {
      this.realApplication = new Application();
    }
  }

  protected void attachBaseContext(Context context)
  {
    if (!AppInfo.usingApkSplits) {
      String apkFile = context.getApplicationInfo().sourceDir;
      long apkModified = apkFile != null ? new File(apkFile).lastModified() : 0L;
      createResources(apkModified);
*******************//新建一个ClassLoader并设置为原ClassLoader的parent**************
      setupClassLoaders(context, context.getCacheDir().getPath(), apkModified);
    }
*******************装载MyApplicaiton,并替换系统中的Applicaiton**************
    createRealApplication();
*******************调用attachBaseContext完成初始化**************
    super.attachBaseContext(context);

    if (this.realApplication != null)
*******************反射调用实际Application的attachBaseContext方法**************
      try {
        Method attachBaseContext = ContextWrapper.class.getDeclaredMethod("attachBaseContext", new Class[] { Context.class });

        attachBaseContext.setAccessible(true);
        attachBaseContext.invoke(this.realApplication, new Object[] { context });
      } catch (Exception e) {
        throw new IllegalStateException(e);
      }
  }

  public Context createPackageContext(String packageName, int flags)
    throws PackageManager.NameNotFoundException
  {
    Context c = this.realApplication.createPackageContext(packageName, flags);
    return c == null ? this.realApplication : c;
  }

  public void registerComponentCallbacks(ComponentCallbacks callback)
  {
    this.realApplication.registerComponentCallbacks(callback);
  }

  public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback)
  {
    this.realApplication.registerActivityLifecycleCallbacks(callback);
  }

  public void registerOnProvideAssistDataListener(Application.OnProvideAssistDataListener callback)
  {
    this.realApplication.registerOnProvideAssistDataListener(callback);
  }

  public void unregisterComponentCallbacks(ComponentCallbacks callback)
  {
    this.realApplication.unregisterComponentCallbacks(callback);
  }

  public void unregisterActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback)
  {
    this.realApplication.unregisterActivityLifecycleCallbacks(callback);
  }

  public void unregisterOnProvideAssistDataListener(Application.OnProvideAssistDataListener callback)
  {
    this.realApplication.unregisterOnProvideAssistDataListener(callback);
  }

  public void onCreate()
  {
    if (!AppInfo.usingApkSplits) {
*****************替换所有当前app的application为realApplication***************
      MonkeyPatcher.monkeyPatchApplication(this, this, this.realApplication, this.externalResourcePath);
*****************替换所有当前app的mAssets为newAssetManager***********
      MonkeyPatcher.monkeyPatchExistingResources(this, this.externalResourcePath, null);
    }
    else
    {
      MonkeyPatcher.monkeyPatchApplication(this, this, this.realApplication, null);
    }

    super.onCreate();

    if (AppInfo.applicationId != null) {
      try {
        boolean foundPackage = false;
        int pid = Process.myPid();
        ActivityManager manager = (ActivityManager)getSystemService("activity");

        List processes = manager.getRunningAppProcesses();
        boolean startServer;
        if ((processes != null) && (processes.size() > 1))
        {
          boolean startServer = false;
          for (ActivityManager.RunningAppProcessInfo processInfo : processes) {
            if (AppInfo.applicationId.equals(processInfo.processName)) {
              foundPackage = true;
              if (processInfo.pid == pid) {
                startServer = true;
                break;
              }
            }
          }
          if ((!startServer) && (!foundPackage))
          {
            startServer = true;
            if (Log.isLoggable("InstantRun", 2)) {
              Log.v("InstantRun", "Multiprocess but didn't find process with package: starting server anyway");
            }
          }
        }
        else
        {
          startServer = true;
        }
********手机客户端app和Android Studio建立Socket通信，AS是客户端发消息，app根据服务端接收消息作出相应操作*****
        if (startServer)
          Server.create(AppInfo.applicationId, this);
      }
      catch (Throwable t) {
        if (Log.isLoggable("InstantRun", 2)) {
          Log.v("InstantRun", "Failed during multi process check", t);
        }
        Server.create(AppInfo.applicationId, this);
      }
    }
**********还记得这个realApplication吗，我们app中实际的Application****************
    if (this.realApplication != null)
      this.realApplication.onCreate();
  }

  static
  {
    com.android.tools.fd.common.Log.logging = new Log.Logging()
    {
      public void log(Level level, String string)
      {
        log(level, string, null);
      }

      public boolean isLoggable(Level level)
      {
        if (level == Level.SEVERE)
          return Log.isLoggable("InstantRun", 6);
        if (level == Level.FINE)
          return Log.isLoggable("InstantRun", 2);
        return Log.isLoggable("InstantRun", 4);
      }

      public void log(Level level, String string, Throwable throwable)
      {
        if (level == Level.SEVERE) {
          if (throwable == null)
            Log.e("InstantRun", string);
          else
            Log.e("InstantRun", string, throwable);
        }
        else if (level == Level.FINE) {
          if (Log.isLoggable("InstantRun", 2)) {
            if (throwable == null)
              Log.v("InstantRun", string);
            else
              Log.v("InstantRun", string, throwable);
          }
        }
        else if (Log.isLoggable("InstantRun", 4))
          if (throwable == null)
            Log.i("InstantRun", string);
          else
            Log.i("InstantRun", string, throwable);
      }
    };
  }
}